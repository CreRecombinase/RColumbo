// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// wrap_ip_dist
arma::mat wrap_ip_dist(const arma::rowvec& cummapa, const arma::rowvec& cummapb, bool isDiag);
RcppExport SEXP RColumbo_wrap_ip_dist(SEXP cummapaSEXP, SEXP cummapbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type cummapa(cummapaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type cummapb(cummapbSEXP);
    Rcpp::traits::input_parameter< bool >::type isDiag(isDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(wrap_ip_dist(cummapa, cummapb, isDiag));
    return rcpp_result_gen;
END_RCPP
}
// ip_cov
arma::mat ip_cov(const arma::mat& Hpanela, const arma::mat& Hpanelb, bool isDiag);
RcppExport SEXP RColumbo_ip_cov(SEXP HpanelaSEXP, SEXP HpanelbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Hpanela(HpanelaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hpanelb(HpanelbSEXP);
    Rcpp::traits::input_parameter< bool >::type isDiag(isDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(ip_cov(Hpanela, Hpanelb, isDiag));
    return rcpp_result_gen;
END_RCPP
}
// cov_2_cor
void cov_2_cor(arma::mat& covmat, arma::mat& rowvara, arma::mat& colvarb, const bool isDiag);
RcppExport SEXP RColumbo_cov_2_cor(SEXP covmatSEXP, SEXP rowvaraSEXP, SEXP colvarbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type covmat(covmatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rowvara(rowvaraSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type colvarb(colvarbSEXP);
    Rcpp::traits::input_parameter< const bool >::type isDiag(isDiagSEXP);
    cov_2_cor(covmat, rowvara, colvarb, isDiag);
    return R_NilValue;
END_RCPP
}
// compute_shrinkage
void compute_shrinkage(arma::mat& distmat, arma::mat& S, const arma::mat& hmata, const double theta, const double m, const double Ne, const double cutoff, const bool isDiag);
RcppExport SEXP RColumbo_compute_shrinkage(SEXP distmatSEXP, SEXP SSEXP, SEXP hmataSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const bool >::type isDiag(isDiagSEXP);
    compute_shrinkage(distmat, S, hmata, theta, m, Ne, cutoff, isDiag);
    return R_NilValue;
END_RCPP
}
// gen_sparsemat
arma::sp_mat gen_sparsemat(arma::mat ldmat, const arma::uword istart, const arma::uword jstart, const arma::uword nSNPs, Rcpp::LogicalVector makeSymmetric);
RcppExport SEXP RColumbo_gen_sparsemat(SEXP ldmatSEXP, SEXP istartSEXP, SEXP jstartSEXP, SEXP nSNPsSEXP, SEXP makeSymmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ldmat(ldmatSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type istart(istartSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type jstart(jstartSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type makeSymmetric(makeSymmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sparsemat(ldmat, istart, jstart, nSNPs, makeSymmetric));
    return rcpp_result_gen;
END_RCPP
}
// calcLD
arma::mat calcLD(const arma::mat hmata, const arma::mat hmatb, const arma::rowvec mapa, const arma::rowvec mapb, const double m, const double Ne, const double cutoff, const Rcpp::LogicalVector isDiag);
RcppExport SEXP RColumbo_calcLD(SEXP hmataSEXP, SEXP hmatbSEXP, SEXP mapaSEXP, SEXP mapbSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type hmatb(hmatbSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mapa(mapaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mapb(mapbSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type isDiag(isDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(calcLD(hmata, hmatb, mapa, mapb, m, Ne, cutoff, isDiag));
    return rcpp_result_gen;
END_RCPP
}
// orthogonalize_covar
arma::mat orthogonalize_covar(const arma::mat& Covariates);
RcppExport SEXP RColumbo_orthogonalize_covar(SEXP CovariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Covariates(CovariatesSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_covar(Covariates));
    return rcpp_result_gen;
END_RCPP
}
// orthogonalize_data
arma::mat orthogonalize_data(const arma::mat& Data, const arma::mat& covariates);
RcppExport SEXP RColumbo_orthogonalize_data(SEXP DataSEXP, SEXP covariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_data(Data, covariates));
    return rcpp_result_gen;
END_RCPP
}
// betaMatrix
arma::mat betaMatrix(const arma::mat& Genotype, const arma::mat& Expression);
RcppExport SEXP RColumbo_betaMatrix(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(betaMatrix(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP
}
// fastest_eQTL
arma::cube fastest_eQTL(const arma::mat& Genotype, const arma::mat& Expression);
RcppExport SEXP RColumbo_fastest_eQTL(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(fastest_eQTL(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP
}
// d_fastest_eQTL
arma::cube d_fastest_eQTL(const arma::mat& Genotype, const arma::mat& Expression);
RcppExport SEXP RColumbo_d_fastest_eQTL(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(d_fastest_eQTL(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP
}
// eqtl_lm
arma::mat eqtl_lm(const arma::mat& Genotype, const arma::vec& Expression);
RcppExport SEXP RColumbo_eqtl_lm(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(eqtl_lm(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP
}
