// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP RColumbo_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    __result = Rcpp::wrap(rcpparma_hello_world());
    return __result;
END_RCPP
}
// pcov
arma::mat pcov(const arma::mat& tH, const arma::uvec& c1, const arma::uvec& c2, const bool isDiag);
RcppExport SEXP RColumbo_pcov(SEXP tHSEXP, SEXP c1SEXP, SEXP c2SEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type tH(tHSEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type c1(c1SEXP);
    Rcpp::traits::input_parameter< const arma::uvec& >::type c2(c2SEXP);
    Rcpp::traits::input_parameter< const bool >::type isDiag(isDiagSEXP);
    __result = Rcpp::wrap(pcov(tH, c1, c2, isDiag));
    return __result;
END_RCPP
}
// gen_rows
arma::uvec gen_rows(const int i, const size_t nrows, const size_t chunksize);
RcppExport SEXP RColumbo_gen_rows(SEXP iSEXP, SEXP nrowsSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type i(iSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type chunksize(chunksizeSEXP);
    __result = Rcpp::wrap(gen_rows(i, nrows, chunksize));
    return __result;
END_RCPP
}
// sparse_LD
arma::sp_mat sparse_LD(const arma::vec& cummap, const arma::mat& Hpanel, const double Ne, const int m, const double cutoff);
RcppExport SEXP RColumbo_sparse_LD(SEXP cummapSEXP, SEXP HpanelSEXP, SEXP NeSEXP, SEXP mSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type cummap(cummapSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hpanel(HpanelSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    __result = Rcpp::wrap(sparse_LD(cummap, Hpanel, Ne, m, cutoff));
    return __result;
END_RCPP
}
