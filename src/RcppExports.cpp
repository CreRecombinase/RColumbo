// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// pMu
arma::vec pMu(const arma::vec& betahat, const arma::vec& serr, const double pi, const double tau);
RcppExport SEXP RColumbo_pMu(SEXP betahatSEXP, SEXP serrSEXP, SEXP piSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type betahat(betahatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type serr(serrSEXP);
    Rcpp::traits::input_parameter< const double >::type pi(piSEXP);
    Rcpp::traits::input_parameter< const double >::type tau(tauSEXP);
    __result = Rcpp::wrap(pMu(betahat, serr, pi, tau));
    return __result;
END_RCPP
}
// sslab_em
Rcpp::NumericVector sslab_em(const arma::vec& p, const arma::vec bh, const arma::vec& si);
RcppExport SEXP RColumbo_sslab_em(SEXP pSEXP, SEXP bhSEXP, SEXP siSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const arma::vec >::type bh(bhSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type si(siSEXP);
    __result = Rcpp::wrap(sslab_em(p, bh, si));
    return __result;
END_RCPP
}
// get_rownum_h5
size_t get_rownum_h5(const std::string hap_h5file, const std::string groupname, const std::string dataname);
RcppExport SEXP RColumbo_get_rownum_h5(SEXP hap_h5fileSEXP, SEXP groupnameSEXP, SEXP datanameSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    __result = Rcpp::wrap(get_rownum_h5(hap_h5file, groupname, dataname));
    return __result;
END_RCPP
}
// read_dmat_h5
arma::mat read_dmat_h5(const std::string hap_h5file, const std::string groupname, const std::string dataname, size_t offset, size_t chunksize);
RcppExport SEXP RColumbo_read_dmat_h5(SEXP hap_h5fileSEXP, SEXP groupnameSEXP, SEXP datanameSEXP, SEXP offsetSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    Rcpp::traits::input_parameter< size_t >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< size_t >::type chunksize(chunksizeSEXP);
    __result = Rcpp::wrap(read_dmat_h5(hap_h5file, groupname, dataname, offset, chunksize));
    return __result;
END_RCPP
}
// read_dmat_chunk_ind
arma::mat read_dmat_chunk_ind(const std::string h5file, const std::string groupname, const std::string dataname, const arma::uvec indvec);
RcppExport SEXP RColumbo_read_dmat_chunk_ind(SEXP h5fileSEXP, SEXP groupnameSEXP, SEXP datanameSEXP, SEXP indvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type h5file(h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    Rcpp::traits::input_parameter< const arma::uvec >::type indvec(indvecSEXP);
    __result = Rcpp::wrap(read_dmat_chunk_ind(h5file, groupname, dataname, indvec));
    return __result;
END_RCPP
}
// intersect_col
arma::uvec intersect_col(const std::string h5file1, const std::string h5groupname1, const std::string h5colname1, const std::string h5file2, const std::string h5groupname2, const std::string h5colname2);
RcppExport SEXP RColumbo_intersect_col(SEXP h5file1SEXP, SEXP h5groupname1SEXP, SEXP h5colname1SEXP, SEXP h5file2SEXP, SEXP h5groupname2SEXP, SEXP h5colname2SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type h5file1(h5file1SEXP);
    Rcpp::traits::input_parameter< const std::string >::type h5groupname1(h5groupname1SEXP);
    Rcpp::traits::input_parameter< const std::string >::type h5colname1(h5colname1SEXP);
    Rcpp::traits::input_parameter< const std::string >::type h5file2(h5file2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type h5groupname2(h5groupname2SEXP);
    Rcpp::traits::input_parameter< const std::string >::type h5colname2(h5colname2SEXP);
    __result = Rcpp::wrap(intersect_col(h5file1, h5groupname1, h5colname1, h5file2, h5groupname2, h5colname2));
    return __result;
END_RCPP
}
// write_dmatrix_h5
int write_dmatrix_h5(Rcpp::String h5file, Rcpp::String groupname, Rcpp::String dataname, Rcpp::IntegerVector Nsnps, Rcpp::IntegerVector Nind, Rcpp::NumericMatrix data, const unsigned int deflate_level);
RcppExport SEXP RColumbo_write_dmatrix_h5(SEXP h5fileSEXP, SEXP groupnameSEXP, SEXP datanameSEXP, SEXP NsnpsSEXP, SEXP NindSEXP, SEXP dataSEXP, SEXP deflate_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::String >::type h5file(h5fileSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type dataname(datanameSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Nsnps(NsnpsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type Nind(NindSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type deflate_level(deflate_levelSEXP);
    __result = Rcpp::wrap(write_dmatrix_h5(h5file, groupname, dataname, Nsnps, Nind, data, deflate_level));
    return __result;
END_RCPP
}
// write_Rint_h5
int write_Rint_h5(const std::string h5file, const std::string groupname, const std::string dataname, Rcpp::IntegerVector& data, const unsigned int deflate_level);
RcppExport SEXP RColumbo_write_Rint_h5(SEXP h5fileSEXP, SEXP groupnameSEXP, SEXP datanameSEXP, SEXP dataSEXP, SEXP deflate_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type h5file(h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type deflate_level(deflate_levelSEXP);
    __result = Rcpp::wrap(write_Rint_h5(h5file, groupname, dataname, data, deflate_level));
    return __result;
END_RCPP
}
// write_Rnumeric_h5
int write_Rnumeric_h5(const std::string h5file, const std::string groupname, const std::string dataname, Rcpp::NumericVector& data, const unsigned int deflate_level);
RcppExport SEXP RColumbo_write_Rnumeric_h5(SEXP h5fileSEXP, SEXP groupnameSEXP, SEXP datanameSEXP, SEXP dataSEXP, SEXP deflate_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type h5file(h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type deflate_level(deflate_levelSEXP);
    __result = Rcpp::wrap(write_Rnumeric_h5(h5file, groupname, dataname, data, deflate_level));
    return __result;
END_RCPP
}
// convertTSparse
arma::mat convertTSparse(Rcpp::S4& mat);
RcppExport SEXP RColumbo_convertTSparse(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::S4& >::type mat(matSEXP);
    __result = Rcpp::wrap(convertTSparse(mat));
    return __result;
END_RCPP
}
// findbandwidth
int findbandwidth(Rcpp::IntegerVector& i, Rcpp::IntegerVector& j, Rcpp::NumericVector& x, double cutoff);
RcppExport SEXP RColumbo_findbandwidth(SEXP iSEXP, SEXP jSEXP, SEXP xSEXP, SEXP cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type j(jSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type cutoff(cutoffSEXP);
    __result = Rcpp::wrap(findbandwidth(i, j, x, cutoff));
    return __result;
END_RCPP
}
// findcutoff
int findcutoff(Rcpp::IntegerVector& i, Rcpp::IntegerVector& j, Rcpp::NumericVector& x, int bandwidth);
RcppExport SEXP RColumbo_findcutoff(SEXP iSEXP, SEXP jSEXP, SEXP xSEXP, SEXP bandwidthSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type i(iSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector& >::type j(jSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type bandwidth(bandwidthSEXP);
    __result = Rcpp::wrap(findcutoff(i, j, x, bandwidth));
    return __result;
END_RCPP
}
// write_haplotype_h5
size_t write_haplotype_h5(const std::string hap_gzfile, const std::string hap_h5file, const size_t nrows, const size_t ncols, size_t chunksize, const unsigned int deflate_level);
RcppExport SEXP RColumbo_write_haplotype_h5(SEXP hap_gzfileSEXP, SEXP hap_h5fileSEXP, SEXP nrowsSEXP, SEXP ncolsSEXP, SEXP chunksizeSEXP, SEXP deflate_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_gzfile(hap_gzfileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type ncols(ncolsSEXP);
    Rcpp::traits::input_parameter< size_t >::type chunksize(chunksizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type deflate_level(deflate_levelSEXP);
    __result = Rcpp::wrap(write_haplotype_h5(hap_gzfile, hap_h5file, nrows, ncols, chunksize, deflate_level));
    return __result;
END_RCPP
}
// read_flip
arma::uvec read_flip(const std::string hap_h5file, arma::uvec indexes);
RcppExport SEXP RColumbo_read_flip(SEXP hap_h5fileSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indexes(indexesSEXP);
    __result = Rcpp::wrap(read_flip(hap_h5file, indexes));
    return __result;
END_RCPP
}
// read_haplotype_ind_h5
arma::Mat<int> read_haplotype_ind_h5(const std::string hap_h5file, arma::uvec indexes);
RcppExport SEXP RColumbo_read_haplotype_ind_h5(SEXP hap_h5fileSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indexes(indexesSEXP);
    __result = Rcpp::wrap(read_haplotype_ind_h5(hap_h5file, indexes));
    return __result;
END_RCPP
}
// read_dmat_ind_h5
arma::mat read_dmat_ind_h5(const std::string hap_h5file, const std::string groupname, const std::string dataname, arma::uvec indexes);
RcppExport SEXP RColumbo_read_dmat_ind_h5(SEXP hap_h5fileSEXP, SEXP groupnameSEXP, SEXP datanameSEXP, SEXP indexesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type groupname(groupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dataname(datanameSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indexes(indexesSEXP);
    __result = Rcpp::wrap(read_dmat_ind_h5(hap_h5file, groupname, dataname, indexes));
    return __result;
END_RCPP
}
// read_dmat_rowname
arma::mat read_dmat_rowname(const std::string h5file, const std::string annogroupname, const std::string annocolname, const std::string datagroupname, const std::string datacolname, arma::uvec queryvec);
RcppExport SEXP RColumbo_read_dmat_rowname(SEXP h5fileSEXP, SEXP annogroupnameSEXP, SEXP annocolnameSEXP, SEXP datagroupnameSEXP, SEXP datacolnameSEXP, SEXP queryvecSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type h5file(h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type annogroupname(annogroupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type annocolname(annocolnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datagroupname(datagroupnameSEXP);
    Rcpp::traits::input_parameter< const std::string >::type datacolname(datacolnameSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type queryvec(queryvecSEXP);
    __result = Rcpp::wrap(read_dmat_rowname(h5file, annogroupname, annocolname, datagroupname, datacolname, queryvec));
    return __result;
END_RCPP
}
// ip_cov
arma::fmat ip_cov(const arma::fmat& Hpanela, const arma::fmat& Hpanelb, bool isDiag);
RcppExport SEXP RColumbo_ip_cov(SEXP HpanelaSEXP, SEXP HpanelbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::fmat& >::type Hpanela(HpanelaSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type Hpanelb(HpanelbSEXP);
    Rcpp::traits::input_parameter< bool >::type isDiag(isDiagSEXP);
    __result = Rcpp::wrap(ip_cov(Hpanela, Hpanelb, isDiag));
    return __result;
END_RCPP
}
// flip_hap
arma::mat flip_hap(const std::string hap_h5file, arma::uvec index, const ::arma::uword chunk, const arma::uword chunksize, const arma::uword nSNPs);
RcppExport SEXP RColumbo_flip_hap(SEXP hap_h5fileSEXP, SEXP indexSEXP, SEXP chunkSEXP, SEXP chunksizeSEXP, SEXP nSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< const ::arma::uword >::type chunk(chunkSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type chunksize(chunksizeSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nSNPs(nSNPsSEXP);
    __result = Rcpp::wrap(flip_hap(hap_h5file, index, chunk, chunksize, nSNPs));
    return __result;
END_RCPP
}
// read_haplotype_h5
arma::Mat<int> read_haplotype_h5(const std::string hap_h5file, const size_t readSNPs, const size_t skipSNPs);
RcppExport SEXP RColumbo_read_haplotype_h5(SEXP hap_h5fileSEXP, SEXP readSNPsSEXP, SEXP skipSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< const size_t >::type readSNPs(readSNPsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type skipSNPs(skipSNPsSEXP);
    __result = Rcpp::wrap(read_haplotype_h5(hap_h5file, readSNPs, skipSNPs));
    return __result;
END_RCPP
}
// gen_rows
arma::uvec gen_rows(const int i, const size_t nrows, const size_t chunksize);
RcppExport SEXP RColumbo_gen_rows(SEXP iSEXP, SEXP nrowsSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const int >::type i(iSEXP);
    Rcpp::traits::input_parameter< const size_t >::type nrows(nrowsSEXP);
    Rcpp::traits::input_parameter< const size_t >::type chunksize(chunksizeSEXP);
    __result = Rcpp::wrap(gen_rows(i, nrows, chunksize));
    return __result;
END_RCPP
}
// read_hap_txt
arma::Mat<short> read_hap_txt(const char* inhapfile);
RcppExport SEXP RColumbo_read_hap_txt(SEXP inhapfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const char* >::type inhapfile(inhapfileSEXP);
    __result = Rcpp::wrap(read_hap_txt(inhapfile));
    return __result;
END_RCPP
}
// read_hap_h5
arma::mat read_hap_h5(const char* inhapfile);
RcppExport SEXP RColumbo_read_hap_h5(SEXP inhapfileSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const char* >::type inhapfile(inhapfileSEXP);
    __result = Rcpp::wrap(read_hap_h5(inhapfile));
    return __result;
END_RCPP
}
// p_sparse_LD
arma::sp_mat p_sparse_LD(const arma::rowvec cummap, const arma::mat Hpanel, const double Ne, const int m, const double cutoff, const arma::uword chunksize, arma::uword i, arma::uword j);
RcppExport SEXP RColumbo_p_sparse_LD(SEXP cummapSEXP, SEXP HpanelSEXP, SEXP NeSEXP, SEXP mSEXP, SEXP cutoffSEXP, SEXP chunksizeSEXP, SEXP iSEXP, SEXP jSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::rowvec >::type cummap(cummapSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Hpanel(HpanelSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type chunksize(chunksizeSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type i(iSEXP);
    Rcpp::traits::input_parameter< arma::uword >::type j(jSEXP);
    __result = Rcpp::wrap(p_sparse_LD(cummap, Hpanel, Ne, m, cutoff, chunksize, i, j));
    return __result;
END_RCPP
}
// sparse_LD
arma::sp_mat sparse_LD(const arma::vec cummap, const arma::mat Hpanel, const double Ne, const int m, const double cutoff, const arma::uword report_every);
RcppExport SEXP RColumbo_sparse_LD(SEXP cummapSEXP, SEXP HpanelSEXP, SEXP NeSEXP, SEXP mSEXP, SEXP cutoffSEXP, SEXP report_everySEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::vec >::type cummap(cummapSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type Hpanel(HpanelSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type report_every(report_everySEXP);
    __result = Rcpp::wrap(sparse_LD(cummap, Hpanel, Ne, m, cutoff, report_every));
    return __result;
END_RCPP
}
// find_bwd
arma::umat find_bwd(arma::mat& LDmat, const double LDcutoff);
RcppExport SEXP RColumbo_find_bwd(SEXP LDmatSEXP, SEXP LDcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type LDmat(LDmatSEXP);
    Rcpp::traits::input_parameter< const double >::type LDcutoff(LDcutoffSEXP);
    __result = Rcpp::wrap(find_bwd(LDmat, LDcutoff));
    return __result;
END_RCPP
}
// cov_2_cor
void cov_2_cor(arma::fmat& covmat, arma::fmat& rowvara, arma::fmat& colvarb, const bool isDiag);
RcppExport SEXP RColumbo_cov_2_cor(SEXP covmatSEXP, SEXP rowvaraSEXP, SEXP colvarbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::fmat& >::type covmat(covmatSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type rowvara(rowvaraSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type colvarb(colvarbSEXP);
    Rcpp::traits::input_parameter< const bool >::type isDiag(isDiagSEXP);
    cov_2_cor(covmat, rowvara, colvarb, isDiag);
    return R_NilValue;
END_RCPP
}
// compute_shrinkage
void compute_shrinkage(arma::fmat& distmat, arma::fmat& S, const arma::fmat& hmata, const arma::fmat& hmatb, const double theta, const double m, const double Ne, const double cutoff, const bool isDiag);
RcppExport SEXP RColumbo_compute_shrinkage(SEXP distmatSEXP, SEXP SSEXP, SEXP hmataSEXP, SEXP hmatbSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::fmat& >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type hmatb(hmatbSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const bool >::type isDiag(isDiagSEXP);
    compute_shrinkage(distmat, S, hmata, hmatb, theta, m, Ne, cutoff, isDiag);
    return R_NilValue;
END_RCPP
}
// gen_sparsemat
arma::sp_fmat gen_sparsemat(arma::fmat ldmat, const arma::uword istart, const arma::uword jstart, const arma::uword nSNPs);
RcppExport SEXP RColumbo_gen_sparsemat(SEXP ldmatSEXP, SEXP istartSEXP, SEXP jstartSEXP, SEXP nSNPsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::fmat >::type ldmat(ldmatSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type istart(istartSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type jstart(jstartSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nSNPs(nSNPsSEXP);
    __result = Rcpp::wrap(gen_sparsemat(ldmat, istart, jstart, nSNPs));
    return __result;
END_RCPP
}
// calcLD
void calcLD(arma::fmat& hmata, arma::fmat& hmatb, arma::frowvec& mapa, arma::frowvec& mapb, arma::fmat& distmat, const double m, const double Ne, const double cutoff, const arma::uword aind, const arma::uword bind);
RcppExport SEXP RColumbo_calcLD(SEXP hmataSEXP, SEXP hmatbSEXP, SEXP mapaSEXP, SEXP mapbSEXP, SEXP distmatSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP aindSEXP, SEXP bindSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::fmat& >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type hmatb(hmatbSEXP);
    Rcpp::traits::input_parameter< arma::frowvec& >::type mapa(mapaSEXP);
    Rcpp::traits::input_parameter< arma::frowvec& >::type mapb(mapbSEXP);
    Rcpp::traits::input_parameter< arma::fmat& >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type aind(aindSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type bind(bindSEXP);
    calcLD(hmata, hmatb, mapa, mapb, distmat, m, Ne, cutoff, aind, bind);
    return R_NilValue;
END_RCPP
}
// gen_dense_LD
arma::fmat gen_dense_LD(const std::string hap_h5file, arma::uvec index, arma::frowvec map, const double m, const double Ne, const double cutoff, const arma::uword i, const arma::uword j, const arma::uword chunksize);
RcppExport SEXP RColumbo_gen_dense_LD(SEXP hap_h5fileSEXP, SEXP indexSEXP, SEXP mapSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP iSEXP, SEXP jSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< arma::frowvec >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type chunksize(chunksizeSEXP);
    __result = Rcpp::wrap(gen_dense_LD(hap_h5file, index, map, m, Ne, cutoff, i, j, chunksize));
    return __result;
END_RCPP
}
// flip_hap_LD
arma::sp_fmat flip_hap_LD(const std::string hap_h5file, arma::uvec index, arma::frowvec map, const double m, const double Ne, const double cutoff, const arma::uword i, const arma::uword j, const arma::uword chunksize);
RcppExport SEXP RColumbo_flip_hap_LD(SEXP hap_h5fileSEXP, SEXP indexSEXP, SEXP mapSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP iSEXP, SEXP jSEXP, SEXP chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const std::string >::type hap_h5file(hap_h5fileSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type index(indexSEXP);
    Rcpp::traits::input_parameter< arma::frowvec >::type map(mapSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type i(iSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type j(jSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type chunksize(chunksizeSEXP);
    __result = Rcpp::wrap(flip_hap_LD(hap_h5file, index, map, m, Ne, cutoff, i, j, chunksize));
    return __result;
END_RCPP
}
// orthogonalize_covar
arma::mat orthogonalize_covar(const arma::mat& Covariates);
RcppExport SEXP RColumbo_orthogonalize_covar(SEXP CovariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type Covariates(CovariatesSEXP);
    __result = Rcpp::wrap(orthogonalize_covar(Covariates));
    return __result;
END_RCPP
}
// orthogonalize_data
arma::mat orthogonalize_data(const arma::mat& Data, const arma::mat& covariates);
RcppExport SEXP RColumbo_orthogonalize_data(SEXP DataSEXP, SEXP covariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    __result = Rcpp::wrap(orthogonalize_data(Data, covariates));
    return __result;
END_RCPP
}
// betaMatrix
arma::fmat betaMatrix(const arma::fmat& Genotype, const arma::fmat& Expression);
RcppExport SEXP RColumbo_betaMatrix(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::fmat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type Expression(ExpressionSEXP);
    __result = Rcpp::wrap(betaMatrix(Genotype, Expression));
    return __result;
END_RCPP
}
// rMatrix
arma::fmat rMatrix(const arma::fmat& Genotype, const arma::fmat& Expression);
RcppExport SEXP RColumbo_rMatrix(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::fmat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type Expression(ExpressionSEXP);
    __result = Rcpp::wrap(rMatrix(Genotype, Expression));
    return __result;
END_RCPP
}
// isCis
arma::uvec isCis(const arma::ivec snp_chrom, const arma::ivec snp_pos, const arma::sword exp_chrom, const arma::sword exp_start, const arma::sword exp_stop, const arma::uword cisdist_cutoff);
RcppExport SEXP RColumbo_isCis(SEXP snp_chromSEXP, SEXP snp_posSEXP, SEXP exp_chromSEXP, SEXP exp_startSEXP, SEXP exp_stopSEXP, SEXP cisdist_cutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::ivec >::type snp_chrom(snp_chromSEXP);
    Rcpp::traits::input_parameter< const arma::ivec >::type snp_pos(snp_posSEXP);
    Rcpp::traits::input_parameter< const arma::sword >::type exp_chrom(exp_chromSEXP);
    Rcpp::traits::input_parameter< const arma::sword >::type exp_start(exp_startSEXP);
    Rcpp::traits::input_parameter< const arma::sword >::type exp_stop(exp_stopSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type cisdist_cutoff(cisdist_cutoffSEXP);
    __result = Rcpp::wrap(isCis(snp_chrom, snp_pos, exp_chrom, exp_start, exp_stop, cisdist_cutoff));
    return __result;
END_RCPP
}
// addLD
arma::uvec addLD(const arma::uvec& snpind, const arma::fmat& LDmat, const float LDcutoff);
RcppExport SEXP RColumbo_addLD(SEXP snpindSEXP, SEXP LDmatSEXP, SEXP LDcutoffSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::uvec& >::type snpind(snpindSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type LDmat(LDmatSEXP);
    Rcpp::traits::input_parameter< const float >::type LDcutoff(LDcutoffSEXP);
    __result = Rcpp::wrap(addLD(snpind, LDmat, LDcutoff));
    return __result;
END_RCPP
}
// extract_stats
Rcpp::DataFrame extract_stats(const arma::fmat& Genotype, const Rcpp::DataFrame snpanno, const arma::fmat& Expression, const Rcpp::DataFrame expanno, const arma::fmat& LDmat, const arma::fmat& rmat, const double tcutoff, const double LDcutoff, const arma::uword cisdist, const bool display_progress, bool doCis);
RcppExport SEXP RColumbo_extract_stats(SEXP GenotypeSEXP, SEXP snpannoSEXP, SEXP ExpressionSEXP, SEXP expannoSEXP, SEXP LDmatSEXP, SEXP rmatSEXP, SEXP tcutoffSEXP, SEXP LDcutoffSEXP, SEXP cisdistSEXP, SEXP display_progressSEXP, SEXP doCisSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::fmat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type snpanno(snpannoSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type Expression(ExpressionSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type expanno(expannoSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type LDmat(LDmatSEXP);
    Rcpp::traits::input_parameter< const arma::fmat& >::type rmat(rmatSEXP);
    Rcpp::traits::input_parameter< const double >::type tcutoff(tcutoffSEXP);
    Rcpp::traits::input_parameter< const double >::type LDcutoff(LDcutoffSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type cisdist(cisdistSEXP);
    Rcpp::traits::input_parameter< const bool >::type display_progress(display_progressSEXP);
    Rcpp::traits::input_parameter< bool >::type doCis(doCisSEXP);
    __result = Rcpp::wrap(extract_stats(Genotype, snpanno, Expression, expanno, LDmat, rmat, tcutoff, LDcutoff, cisdist, display_progress, doCis));
    return __result;
END_RCPP
}
// serrMatrix
arma::mat serrMatrix(const arma::mat& Genotype, const arma::mat& Expression, const arma::mat& Betas);
RcppExport SEXP RColumbo_serrMatrix(SEXP GenotypeSEXP, SEXP ExpressionSEXP, SEXP BetasSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Expression(ExpressionSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Betas(BetasSEXP);
    __result = Rcpp::wrap(serrMatrix(Genotype, Expression, Betas));
    return __result;
END_RCPP
}
// orthogonalize_dataset
void orthogonalize_dataset(std::string h5filename, std::string datagroup, std::string datasetname, std::string newdatasetname, size_t chunksize, const unsigned int deflate_level);
RcppExport SEXP RColumbo_orthogonalize_dataset(SEXP h5filenameSEXP, SEXP datagroupSEXP, SEXP datasetnameSEXP, SEXP newdatasetnameSEXP, SEXP chunksizeSEXP, SEXP deflate_levelSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< std::string >::type h5filename(h5filenameSEXP);
    Rcpp::traits::input_parameter< std::string >::type datagroup(datagroupSEXP);
    Rcpp::traits::input_parameter< std::string >::type datasetname(datasetnameSEXP);
    Rcpp::traits::input_parameter< std::string >::type newdatasetname(newdatasetnameSEXP);
    Rcpp::traits::input_parameter< size_t >::type chunksize(chunksizeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type deflate_level(deflate_levelSEXP);
    orthogonalize_dataset(h5filename, datagroup, datasetname, newdatasetname, chunksize, deflate_level);
    return R_NilValue;
END_RCPP
}
// make_long
arma::uvec make_long(arma::uvec& vchrom, arma::uvec& vpos, arma::uvec& posmap);
RcppExport SEXP RColumbo_make_long(SEXP vchromSEXP, SEXP vposSEXP, SEXP posmapSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::uvec& >::type vchrom(vchromSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type vpos(vposSEXP);
    Rcpp::traits::input_parameter< arma::uvec& >::type posmap(posmapSEXP);
    __result = Rcpp::wrap(make_long(vchrom, vpos, posmap));
    return __result;
END_RCPP
}
// colssd
arma::rowvec colssd(const arma::mat& data);
RcppExport SEXP RColumbo_colssd(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::mat& >::type data(dataSEXP);
    __result = Rcpp::wrap(colssd(data));
    return __result;
END_RCPP
}
// write_genotype_h5
arma::uvec write_genotype_h5(const char* snpdatmat, size_t Nind, size_t Nsnps, size_t chunksize, const std::string h5file, bool doFlip, const std::string dbsnpfile, const unsigned int deflate_level);
RcppExport SEXP RColumbo_write_genotype_h5(SEXP snpdatmatSEXP, SEXP NindSEXP, SEXP NsnpsSEXP, SEXP chunksizeSEXP, SEXP h5fileSEXP, SEXP doFlipSEXP, SEXP dbsnpfileSEXP, SEXP deflate_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const char* >::type snpdatmat(snpdatmatSEXP);
    Rcpp::traits::input_parameter< size_t >::type Nind(NindSEXP);
    Rcpp::traits::input_parameter< size_t >::type Nsnps(NsnpsSEXP);
    Rcpp::traits::input_parameter< size_t >::type chunksize(chunksizeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type h5file(h5fileSEXP);
    Rcpp::traits::input_parameter< bool >::type doFlip(doFlipSEXP);
    Rcpp::traits::input_parameter< const std::string >::type dbsnpfile(dbsnpfileSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type deflate_level(deflate_levelSEXP);
    __result = Rcpp::wrap(write_genotype_h5(snpdatmat, Nind, Nsnps, chunksize, h5file, doFlip, dbsnpfile, deflate_level));
    return __result;
END_RCPP
}
// write_expression_h5
size_t write_expression_h5(const char* expdatmat, size_t Nind, size_t Ngenes, size_t chunksize, const std::string h5file, const std::string gene_posfile, const unsigned int deflate_level);
RcppExport SEXP RColumbo_write_expression_h5(SEXP expdatmatSEXP, SEXP NindSEXP, SEXP NgenesSEXP, SEXP chunksizeSEXP, SEXP h5fileSEXP, SEXP gene_posfileSEXP, SEXP deflate_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const char* >::type expdatmat(expdatmatSEXP);
    Rcpp::traits::input_parameter< size_t >::type Nind(NindSEXP);
    Rcpp::traits::input_parameter< size_t >::type Ngenes(NgenesSEXP);
    Rcpp::traits::input_parameter< size_t >::type chunksize(chunksizeSEXP);
    Rcpp::traits::input_parameter< const std::string >::type h5file(h5fileSEXP);
    Rcpp::traits::input_parameter< const std::string >::type gene_posfile(gene_posfileSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type deflate_level(deflate_levelSEXP);
    __result = Rcpp::wrap(write_expression_h5(expdatmat, Nind, Ngenes, chunksize, h5file, gene_posfile, deflate_level));
    return __result;
END_RCPP
}
