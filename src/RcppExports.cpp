// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/RColumbo.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// wrap_ip_dist
arma::mat wrap_ip_dist(const arma::rowvec& cummapa, const arma::rowvec& cummapb, bool isDiag);
static SEXP RColumbo_wrap_ip_dist_try(SEXP cummapaSEXP, SEXP cummapbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type cummapa(cummapaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type cummapb(cummapbSEXP);
    Rcpp::traits::input_parameter< bool >::type isDiag(isDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(wrap_ip_dist(cummapa, cummapb, isDiag));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_wrap_ip_dist(SEXP cummapaSEXP, SEXP cummapbSEXP, SEXP isDiagSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_wrap_ip_dist_try(cummapaSEXP, cummapbSEXP, isDiagSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// ip_cov
arma::mat ip_cov(const arma::mat& Hpanela, const arma::mat& Hpanelb, bool isDiag);
static SEXP RColumbo_ip_cov_try(SEXP HpanelaSEXP, SEXP HpanelbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Hpanela(HpanelaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Hpanelb(HpanelbSEXP);
    Rcpp::traits::input_parameter< bool >::type isDiag(isDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(ip_cov(Hpanela, Hpanelb, isDiag));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_ip_cov(SEXP HpanelaSEXP, SEXP HpanelbSEXP, SEXP isDiagSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_ip_cov_try(HpanelaSEXP, HpanelbSEXP, isDiagSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cov_2_cor
void cov_2_cor(arma::mat& covmat, arma::mat& rowvara, arma::mat& colvarb, const bool isDiag);
static SEXP RColumbo_cov_2_cor_try(SEXP covmatSEXP, SEXP rowvaraSEXP, SEXP colvarbSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< arma::mat& >::type covmat(covmatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type rowvara(rowvaraSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type colvarb(colvarbSEXP);
    Rcpp::traits::input_parameter< const bool >::type isDiag(isDiagSEXP);
    cov_2_cor(covmat, rowvara, colvarb, isDiag);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_cov_2_cor(SEXP covmatSEXP, SEXP rowvaraSEXP, SEXP colvarbSEXP, SEXP isDiagSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_cov_2_cor_try(covmatSEXP, rowvaraSEXP, colvarbSEXP, isDiagSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// compute_shrinkage
void compute_shrinkage(arma::mat& distmat, arma::mat& S, const arma::mat& hmata, const double theta, const double m, const double Ne, const double cutoff, const bool isDiag);
static SEXP RColumbo_compute_shrinkage_try(SEXP distmatSEXP, SEXP SSEXP, SEXP hmataSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::traits::input_parameter< arma::mat& >::type distmat(distmatSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< const double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const bool >::type isDiag(isDiagSEXP);
    compute_shrinkage(distmat, S, hmata, theta, m, Ne, cutoff, isDiag);
    return R_NilValue;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_compute_shrinkage(SEXP distmatSEXP, SEXP SSEXP, SEXP hmataSEXP, SEXP thetaSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP isDiagSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_compute_shrinkage_try(distmatSEXP, SSEXP, hmataSEXP, thetaSEXP, mSEXP, NeSEXP, cutoffSEXP, isDiagSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// gen_sparsemat
arma::sp_mat gen_sparsemat(arma::mat ldmat, const arma::uword istart, const arma::uword jstart, const arma::uword nSNPs, Rcpp::LogicalVector makeSymmetric);
static SEXP RColumbo_gen_sparsemat_try(SEXP ldmatSEXP, SEXP istartSEXP, SEXP jstartSEXP, SEXP nSNPsSEXP, SEXP makeSymmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< arma::mat >::type ldmat(ldmatSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type istart(istartSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type jstart(jstartSEXP);
    Rcpp::traits::input_parameter< const arma::uword >::type nSNPs(nSNPsSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type makeSymmetric(makeSymmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_sparsemat(ldmat, istart, jstart, nSNPs, makeSymmetric));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_gen_sparsemat(SEXP ldmatSEXP, SEXP istartSEXP, SEXP jstartSEXP, SEXP nSNPsSEXP, SEXP makeSymmetricSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_gen_sparsemat_try(ldmatSEXP, istartSEXP, jstartSEXP, nSNPsSEXP, makeSymmetricSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// calcLD
arma::mat calcLD(const arma::mat hmata, const arma::mat hmatb, const arma::rowvec mapa, const arma::rowvec mapb, const double m, const double Ne, const double cutoff, const Rcpp::LogicalVector isDiag);
static SEXP RColumbo_calcLD_try(SEXP hmataSEXP, SEXP hmatbSEXP, SEXP mapaSEXP, SEXP mapbSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP isDiagSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat >::type hmata(hmataSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type hmatb(hmatbSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mapa(mapaSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec >::type mapb(mapbSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const double >::type Ne(NeSEXP);
    Rcpp::traits::input_parameter< const double >::type cutoff(cutoffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::LogicalVector >::type isDiag(isDiagSEXP);
    rcpp_result_gen = Rcpp::wrap(calcLD(hmata, hmatb, mapa, mapb, m, Ne, cutoff, isDiag));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_calcLD(SEXP hmataSEXP, SEXP hmatbSEXP, SEXP mapaSEXP, SEXP mapbSEXP, SEXP mSEXP, SEXP NeSEXP, SEXP cutoffSEXP, SEXP isDiagSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_calcLD_try(hmataSEXP, hmatbSEXP, mapaSEXP, mapbSEXP, mSEXP, NeSEXP, cutoffSEXP, isDiagSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_covar
arma::mat orthogonalize_covar(const arma::mat& Covariates);
static SEXP RColumbo_orthogonalize_covar_try(SEXP CovariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Covariates(CovariatesSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_covar(Covariates));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_orthogonalize_covar(SEXP CovariatesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_orthogonalize_covar_try(CovariatesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// orthogonalize_data
arma::mat orthogonalize_data(const arma::mat& Data, const arma::mat& covariates);
static SEXP RColumbo_orthogonalize_data_try(SEXP DataSEXP, SEXP covariatesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Data(DataSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type covariates(covariatesSEXP);
    rcpp_result_gen = Rcpp::wrap(orthogonalize_data(Data, covariates));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_orthogonalize_data(SEXP DataSEXP, SEXP covariatesSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_orthogonalize_data_try(DataSEXP, covariatesSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// calcAF
arma::vec calcAF(const arma::mat& Genotype);
static SEXP RColumbo_calcAF_try(SEXP GenotypeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    rcpp_result_gen = Rcpp::wrap(calcAF(Genotype));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_calcAF(SEXP GenotypeSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_calcAF_try(GenotypeSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// betaMatrix
arma::mat betaMatrix(const arma::mat& Genotype, const arma::mat& Expression);
static SEXP RColumbo_betaMatrix_try(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(betaMatrix(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_betaMatrix(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_betaMatrix_try(GenotypeSEXP, ExpressionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fastest_eQTL
arma::cube fastest_eQTL(const arma::mat& Genotype, const arma::mat& Expression);
static SEXP RColumbo_fastest_eQTL_try(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(fastest_eQTL(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_fastest_eQTL(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_fastest_eQTL_try(GenotypeSEXP, ExpressionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// d_fastest_eQTL
arma::cube d_fastest_eQTL(const arma::mat& Genotype, const arma::mat& Expression);
static SEXP RColumbo_d_fastest_eQTL_try(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(d_fastest_eQTL(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_d_fastest_eQTL(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_d_fastest_eQTL_try(GenotypeSEXP, ExpressionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// eqtl_lm
arma::mat eqtl_lm(const arma::mat& Genotype, const arma::vec& Expression);
static SEXP RColumbo_eqtl_lm_try(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Genotype(GenotypeSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type Expression(ExpressionSEXP);
    rcpp_result_gen = Rcpp::wrap(eqtl_lm(Genotype, Expression));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP RColumbo_eqtl_lm(SEXP GenotypeSEXP, SEXP ExpressionSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(RColumbo_eqtl_lm_try(GenotypeSEXP, ExpressionSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}

// validate (ensure exported C++ functions exist before calling them)
static int RColumbo_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("arma::mat(*wrap_ip_dist)(const arma::rowvec&,const arma::rowvec&,bool)");
        signatures.insert("arma::mat(*ip_cov)(const arma::mat&,const arma::mat&,bool)");
        signatures.insert("void(*cov_2_cor)(arma::mat&,arma::mat&,arma::mat&,const bool)");
        signatures.insert("void(*compute_shrinkage)(arma::mat&,arma::mat&,const arma::mat&,const double,const double,const double,const double,const bool)");
        signatures.insert("arma::sp_mat(*gen_sparsemat)(arma::mat,const arma::uword,const arma::uword,const arma::uword,Rcpp::LogicalVector)");
        signatures.insert("arma::mat(*calcLD)(const arma::mat,const arma::mat,const arma::rowvec,const arma::rowvec,const double,const double,const double,const Rcpp::LogicalVector)");
        signatures.insert("arma::mat(*orthogonalize_covar)(const arma::mat&)");
        signatures.insert("arma::mat(*orthogonalize_data)(const arma::mat&,const arma::mat&)");
        signatures.insert("arma::vec(*calcAF)(const arma::mat&)");
        signatures.insert("arma::mat(*betaMatrix)(const arma::mat&,const arma::mat&)");
        signatures.insert("arma::cube(*fastest_eQTL)(const arma::mat&,const arma::mat&)");
        signatures.insert("arma::cube(*d_fastest_eQTL)(const arma::mat&,const arma::mat&)");
        signatures.insert("arma::mat(*eqtl_lm)(const arma::mat&,const arma::vec&)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP RColumbo_RcppExport_registerCCallable() { 
    R_RegisterCCallable("RColumbo", "RColumbo_wrap_ip_dist", (DL_FUNC)RColumbo_wrap_ip_dist_try);
    R_RegisterCCallable("RColumbo", "RColumbo_ip_cov", (DL_FUNC)RColumbo_ip_cov_try);
    R_RegisterCCallable("RColumbo", "RColumbo_cov_2_cor", (DL_FUNC)RColumbo_cov_2_cor_try);
    R_RegisterCCallable("RColumbo", "RColumbo_compute_shrinkage", (DL_FUNC)RColumbo_compute_shrinkage_try);
    R_RegisterCCallable("RColumbo", "RColumbo_gen_sparsemat", (DL_FUNC)RColumbo_gen_sparsemat_try);
    R_RegisterCCallable("RColumbo", "RColumbo_calcLD", (DL_FUNC)RColumbo_calcLD_try);
    R_RegisterCCallable("RColumbo", "RColumbo_orthogonalize_covar", (DL_FUNC)RColumbo_orthogonalize_covar_try);
    R_RegisterCCallable("RColumbo", "RColumbo_orthogonalize_data", (DL_FUNC)RColumbo_orthogonalize_data_try);
    R_RegisterCCallable("RColumbo", "RColumbo_calcAF", (DL_FUNC)RColumbo_calcAF_try);
    R_RegisterCCallable("RColumbo", "RColumbo_betaMatrix", (DL_FUNC)RColumbo_betaMatrix_try);
    R_RegisterCCallable("RColumbo", "RColumbo_fastest_eQTL", (DL_FUNC)RColumbo_fastest_eQTL_try);
    R_RegisterCCallable("RColumbo", "RColumbo_d_fastest_eQTL", (DL_FUNC)RColumbo_d_fastest_eQTL_try);
    R_RegisterCCallable("RColumbo", "RColumbo_eqtl_lm", (DL_FUNC)RColumbo_eqtl_lm_try);
    R_RegisterCCallable("RColumbo", "RColumbo_RcppExport_validate", (DL_FUNC)RColumbo_RcppExport_validate);
    return R_NilValue;
}
