// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_RColumbo_RCPPEXPORTS_H_GEN_
#define RCPP_RColumbo_RCPPEXPORTS_H_GEN_

#include <RcppArmadillo.h>
#include <Rcpp.h>

namespace RColumbo {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("RColumbo", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("RColumbo", "RColumbo_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in RColumbo");
            }
        }
    }

    inline arma::mat wrap_ip_dist(const arma::rowvec& cummapa, const arma::rowvec& cummapb, bool isDiag) {
        typedef SEXP(*Ptr_wrap_ip_dist)(SEXP,SEXP,SEXP);
        static Ptr_wrap_ip_dist p_wrap_ip_dist = NULL;
        if (p_wrap_ip_dist == NULL) {
            validateSignature("arma::mat(*wrap_ip_dist)(const arma::rowvec&,const arma::rowvec&,bool)");
            p_wrap_ip_dist = (Ptr_wrap_ip_dist)R_GetCCallable("RColumbo", "RColumbo_wrap_ip_dist");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_wrap_ip_dist(Rcpp::wrap(cummapa), Rcpp::wrap(cummapb), Rcpp::wrap(isDiag));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat ip_cov(const arma::mat& Hpanela, const arma::mat& Hpanelb, bool isDiag) {
        typedef SEXP(*Ptr_ip_cov)(SEXP,SEXP,SEXP);
        static Ptr_ip_cov p_ip_cov = NULL;
        if (p_ip_cov == NULL) {
            validateSignature("arma::mat(*ip_cov)(const arma::mat&,const arma::mat&,bool)");
            p_ip_cov = (Ptr_ip_cov)R_GetCCallable("RColumbo", "RColumbo_ip_cov");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_ip_cov(Rcpp::wrap(Hpanela), Rcpp::wrap(Hpanelb), Rcpp::wrap(isDiag));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline void cov_2_cor(arma::mat& covmat, arma::mat& rowvara, arma::mat& colvarb, const bool isDiag) {
        typedef SEXP(*Ptr_cov_2_cor)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_cov_2_cor p_cov_2_cor = NULL;
        if (p_cov_2_cor == NULL) {
            validateSignature("void(*cov_2_cor)(arma::mat&,arma::mat&,arma::mat&,const bool)");
            p_cov_2_cor = (Ptr_cov_2_cor)R_GetCCallable("RColumbo", "RColumbo_cov_2_cor");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cov_2_cor(Rcpp::wrap(covmat), Rcpp::wrap(rowvara), Rcpp::wrap(colvarb), Rcpp::wrap(isDiag));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline void compute_shrinkage(arma::mat& distmat, arma::mat& S, const arma::mat& hmata, const double theta, const double m, const double Ne, const double cutoff, const bool isDiag) {
        typedef SEXP(*Ptr_compute_shrinkage)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_compute_shrinkage p_compute_shrinkage = NULL;
        if (p_compute_shrinkage == NULL) {
            validateSignature("void(*compute_shrinkage)(arma::mat&,arma::mat&,const arma::mat&,const double,const double,const double,const double,const bool)");
            p_compute_shrinkage = (Ptr_compute_shrinkage)R_GetCCallable("RColumbo", "RColumbo_compute_shrinkage");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_compute_shrinkage(Rcpp::wrap(distmat), Rcpp::wrap(S), Rcpp::wrap(hmata), Rcpp::wrap(theta), Rcpp::wrap(m), Rcpp::wrap(Ne), Rcpp::wrap(cutoff), Rcpp::wrap(isDiag));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
    }

    inline arma::sp_mat gen_sparsemat(arma::mat ldmat, const arma::uword istart, const arma::uword jstart, const arma::uword nSNPs, Rcpp::LogicalVector makeSymmetric) {
        typedef SEXP(*Ptr_gen_sparsemat)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_gen_sparsemat p_gen_sparsemat = NULL;
        if (p_gen_sparsemat == NULL) {
            validateSignature("arma::sp_mat(*gen_sparsemat)(arma::mat,const arma::uword,const arma::uword,const arma::uword,Rcpp::LogicalVector)");
            p_gen_sparsemat = (Ptr_gen_sparsemat)R_GetCCallable("RColumbo", "RColumbo_gen_sparsemat");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_gen_sparsemat(Rcpp::wrap(ldmat), Rcpp::wrap(istart), Rcpp::wrap(jstart), Rcpp::wrap(nSNPs), Rcpp::wrap(makeSymmetric));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::sp_mat >(rcpp_result_gen);
    }

    inline arma::mat calcLD(const arma::mat hmata, const arma::mat hmatb, const arma::rowvec mapa, const arma::rowvec mapb, const double m, const double Ne, const double cutoff, const Rcpp::LogicalVector isDiag) {
        typedef SEXP(*Ptr_calcLD)(SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_calcLD p_calcLD = NULL;
        if (p_calcLD == NULL) {
            validateSignature("arma::mat(*calcLD)(const arma::mat,const arma::mat,const arma::rowvec,const arma::rowvec,const double,const double,const double,const Rcpp::LogicalVector)");
            p_calcLD = (Ptr_calcLD)R_GetCCallable("RColumbo", "RColumbo_calcLD");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_calcLD(Rcpp::wrap(hmata), Rcpp::wrap(hmatb), Rcpp::wrap(mapa), Rcpp::wrap(mapb), Rcpp::wrap(m), Rcpp::wrap(Ne), Rcpp::wrap(cutoff), Rcpp::wrap(isDiag));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat orthogonalize_covar(const arma::mat& Covariates) {
        typedef SEXP(*Ptr_orthogonalize_covar)(SEXP);
        static Ptr_orthogonalize_covar p_orthogonalize_covar = NULL;
        if (p_orthogonalize_covar == NULL) {
            validateSignature("arma::mat(*orthogonalize_covar)(const arma::mat&)");
            p_orthogonalize_covar = (Ptr_orthogonalize_covar)R_GetCCallable("RColumbo", "RColumbo_orthogonalize_covar");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_covar(Rcpp::wrap(Covariates));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::mat orthogonalize_data(const arma::mat& Data, const arma::mat& covariates) {
        typedef SEXP(*Ptr_orthogonalize_data)(SEXP,SEXP);
        static Ptr_orthogonalize_data p_orthogonalize_data = NULL;
        if (p_orthogonalize_data == NULL) {
            validateSignature("arma::mat(*orthogonalize_data)(const arma::mat&,const arma::mat&)");
            p_orthogonalize_data = (Ptr_orthogonalize_data)R_GetCCallable("RColumbo", "RColumbo_orthogonalize_data");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_orthogonalize_data(Rcpp::wrap(Data), Rcpp::wrap(covariates));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::vec calcAF(const arma::mat& Genotype) {
        typedef SEXP(*Ptr_calcAF)(SEXP);
        static Ptr_calcAF p_calcAF = NULL;
        if (p_calcAF == NULL) {
            validateSignature("arma::vec(*calcAF)(const arma::mat&)");
            p_calcAF = (Ptr_calcAF)R_GetCCallable("RColumbo", "RColumbo_calcAF");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_calcAF(Rcpp::wrap(Genotype));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::vec >(rcpp_result_gen);
    }

    inline arma::mat betaMatrix(const arma::mat& Genotype, const arma::mat& Expression) {
        typedef SEXP(*Ptr_betaMatrix)(SEXP,SEXP);
        static Ptr_betaMatrix p_betaMatrix = NULL;
        if (p_betaMatrix == NULL) {
            validateSignature("arma::mat(*betaMatrix)(const arma::mat&,const arma::mat&)");
            p_betaMatrix = (Ptr_betaMatrix)R_GetCCallable("RColumbo", "RColumbo_betaMatrix");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_betaMatrix(Rcpp::wrap(Genotype), Rcpp::wrap(Expression));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

    inline arma::cube fastest_eQTL(const arma::mat& Genotype, const arma::mat& Expression) {
        typedef SEXP(*Ptr_fastest_eQTL)(SEXP,SEXP);
        static Ptr_fastest_eQTL p_fastest_eQTL = NULL;
        if (p_fastest_eQTL == NULL) {
            validateSignature("arma::cube(*fastest_eQTL)(const arma::mat&,const arma::mat&)");
            p_fastest_eQTL = (Ptr_fastest_eQTL)R_GetCCallable("RColumbo", "RColumbo_fastest_eQTL");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fastest_eQTL(Rcpp::wrap(Genotype), Rcpp::wrap(Expression));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::cube >(rcpp_result_gen);
    }

    inline arma::cube d_fastest_eQTL(const arma::mat& Genotype, const arma::mat& Expression) {
        typedef SEXP(*Ptr_d_fastest_eQTL)(SEXP,SEXP);
        static Ptr_d_fastest_eQTL p_d_fastest_eQTL = NULL;
        if (p_d_fastest_eQTL == NULL) {
            validateSignature("arma::cube(*d_fastest_eQTL)(const arma::mat&,const arma::mat&)");
            p_d_fastest_eQTL = (Ptr_d_fastest_eQTL)R_GetCCallable("RColumbo", "RColumbo_d_fastest_eQTL");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_d_fastest_eQTL(Rcpp::wrap(Genotype), Rcpp::wrap(Expression));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::cube >(rcpp_result_gen);
    }

    inline arma::mat eqtl_lm(const arma::mat& Genotype, const arma::vec& Expression) {
        typedef SEXP(*Ptr_eqtl_lm)(SEXP,SEXP);
        static Ptr_eqtl_lm p_eqtl_lm = NULL;
        if (p_eqtl_lm == NULL) {
            validateSignature("arma::mat(*eqtl_lm)(const arma::mat&,const arma::vec&)");
            p_eqtl_lm = (Ptr_eqtl_lm)R_GetCCallable("RColumbo", "RColumbo_eqtl_lm");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_eqtl_lm(Rcpp::wrap(Genotype), Rcpp::wrap(Expression));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<arma::mat >(rcpp_result_gen);
    }

}

#endif // RCPP_RColumbo_RCPPEXPORTS_H_GEN_
